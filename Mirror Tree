class Node:
    
    
    def __init__(self, data):
        self.left = None
        self.right = None
        self.data = data
    
    
    def insert(self, data):
        if self.data:
            if data > self.data:
                if self.left is None:
                    self.left = Node(data)
                else:
                    self.left.insert(data)
            elif data < self.data:
                if self.right is None:
                    self.right = Node(data)
                else:
                    self.right.insert(data)
        else:
            self.data = data

    def PrintTreePostOrder(self):
        if self.left:
            self.left.PrintTreePostOrder()
        if self.right:
            self.right.PrintTreePostOrder()
        print(self.data, end=" ")    
    
    def PrintTreePreOrder(self):
        print(self.data, end=" ")
        if self.left:
            self.left.PrintTreePreOrder()
        if self.right:
            self.right.PrintTreePreOrder()

    def PrintTreeInOrder(self):
        if self.left:
            self.left.PrintTreeInOrder()
        print(self.data, end=" ")
        if self.right:
            self.right.PrintTreeInOrder()

    def count(self, root):
        counter = 1
        if root is None:
            return -1
        else:
            if root.left is not None:
                counter += self.count(root.left)
            if root.right is not None:
                counter += self.count(root.right)
        return counter
    
    def secondMaxUtil(self, root, c): 
        if root == None or c[0] >= 2:  
            return
      
        root.secondMaxUtil(root.left, c) 
      
        c[0] += 1
        if c[0] == 2: 
            print(root.data)  
            return 
        root.secondMaxUtil(root.right, c) 
       
    def secondMax(self, root): 
        c = [0]  
        root.secondMaxUtil(root, c) 
        
#input        
n = int(input())
bst = list(map(int, input().split()))
root = Node(int(bst[0]))
for i in range(len(bst)):
    if bst[i] != bst[0]:
        root.insert(int(bst[i]))

#Baris 1
root.PrintTreePreOrder()
print()
#Baris 2
root.PrintTreeInOrder()
print()
#Baris 3
root.PrintTreePostOrder()
print()
#Baris 4
x = root.count(root)
if  x < 2:
    print("tidak ada")    
else:
    root.secondMax(root)    
